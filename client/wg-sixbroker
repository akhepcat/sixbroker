#!/bin/bash
#
####  Where this script and config files live
WGDIR=/etc/wireguard

#######################################
# Programmatically assigned, no touchie

PROG="${0##*/}"
CONFIG=${PROG//wg-/}
SERVER=${CONFIG//\.*/}
CONFIG=${WGDIR}/${SERVER}.conf
HN=$(hostname)

mkdir -p ${WGDIR}/servers ${WGDIR}/private 
chmod 700 ${WGDIR}/private
umask 077

SK=$(cat ${WGDIR}/servers/${SERVER}.publickey 2>/dev/null)
HK=$(cat ${WGDIR}/private/${HN}.publickey 2>/dev/null)
PK=$(cat ${WGDIR}/private/${HN}.privatekey 2>/dev/null)

gen_client_key() {
	if [ -z "${HK}" -a -z "${PK}" ]
	then
		wg genkey > ${WGDIR}/private/${HN}.privatekey
		wg pubkey < ${WGDIR}/private/${HN}.privatekey > ${WGDIR}/private/${HN}.publickey
	fi
	echo "New client keys generated.  Submit the public key to the server to generate the server-side config."
	exit 0
}

check_keys() {
        if [ -z "${SK}" ]
        then
        	echo "Can't continue - server publickey is missing!"
        	exit 1
        elif [ -z "$(grep ${SK} ${CONFIG})" ];
        then
                sed -i "s|PublicKey.*|PublicKey = ${SK}|g" ${CONFIG}
        fi
        if [ -z "${PK}" ]
        then
        	echo "Can't continue - client privatekey is missing!"
        	exit 1
        elif [ -z "$(grep ${PK} ${CONFIG})" ];
        then
		sed -i "s|PrivateKey.*|PrivateKey = ${PK}|g" ${CONFIG}
	fi
	if [ -z "${HK}" ]
	then
		echo "Can't continue - client publickey is missing!"
		exit 1
	fi
}

stop() {
	DEV=$(sort -n -k +7 /proc/net/route | awk 'BEGIN { IGNORECASE=1 } /^[a-z0-9]+[ \t]+00000000/ { print $1 }' | head -1)
	iptables -D INPUT -p udp -m udp --dport ${CPORT} -j ACCEPT
	iptables -D FORWARD -o ${DEV} -m conntrack --ctstate NEW -j ACCEPT

	# There -should- be an existing MASQ rule that matches our physical device, so we need to copy it for our virtual tunnel device
	MASQIP=$( iptables -t nat --list-rules | egrep -i "(${DEV})?.*MASQUERADE" | egrep -o '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}(/[0-9]{1,3})?' | sort -u | tail -1)
	[[ -n "${MASQIP}" ]] && iptables -t nat -D POSTROUTING -s ${MASQIP} -o ${SERVER} -j MASQUERADE

	wg-quick down ${SERVER}
	rmmod wireguard
}

start() {

	check_keys

	DEV=$(sort -n -k +7 /proc/net/route | awk 'BEGIN { IGNORECASE=1 } /^[a-z0-9]+[ \t]+00000000/ { print $1 }' | head -1)
	DGW=$(ip route show dev ${DEV} proto boot| grep default | sed 's/.*via //g;' | awk '{print $1}')
	PEER=$(grep '^Endpoint' ${CONFIG} | sed 's/.*= \(.*\):.*/\1/g;')
	sed -i "s/\(ip -4 route add\) \(.*\) via .*/\1 ${PEER} via ${DGW}/g" ${CONFIG}
	sed -i "s/\(ip -4 route del\) \(.*\) via .*/\1 ${PEER} via ${DGW}/g" ${CONFIG}
	sed -i "s/default dev.*/default dev ${SERVER}/g" ${CONFIG}
	sed -i "s/default via.*/default via ${DGW}/g" ${CONFIG}

	wg-quick up ${SERVER}

	WANv6=$(grep 'ip -6 addr add' ${CONFIG} | sed 's/.*ip -6 addr add //g; s/dev sixbroker//g;')
	if [ -n "${WANv6}" ];
	then
		ip route add ::/0 via ${WANv6//::*/::1} dev ${SERVER}
	fi

	iptables -I INPUT -p udp -m udp --dport ${CPORT} -j ACCEPT
	iptables -A FORWARD -o ${DEV} -m conntrack --ctstate NEW -j ACCEPT

	# There -should- be an existing MASQ rule that matches our physical device, so we need to copy it for our virtual tunnel device
	MASQIP=$( iptables -t nat --list-rules | egrep -i "(${DEV})?.*MASQUERADE" | egrep -o '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}(/[0-9]{1,3})?' | sort -u | tail -1)
	[[ -n "${MASQIP}" ]] && iptables -t nat -A POSTROUTING -s ${MASQIP} -o ${SERVER} -j MASQUERADE

}

soft_restart() {
	do_status

	if [ ${_running} -eq 1 ];
	then
		echo "restarting the running service"
		stop
		start
	else
		echo "not restarting the stopped service"
		rmmod wireguard >/dev/null 2>&1
	fi
}
		
do_status() {
	_running=0

	if [ -n "$( wg show interfaces )" ];
	then
		_running=1
	fi
}
	
status() {
	do_status

	if [ ${_running} -eq 1 ]
	then
		echo "Not running"
	else
	        wg show ${SERVER}
                ip -4 route show dev ${SERVER}
                ip -6 route show dev ${SERVER}
	fi
}

CPORT=$(grep -i 'ListenPort' ${CONFIG} | cut -f 2 -d=)

gen_client_key

case ${1} in
	start) check_keys; start
		;;
	stop) stop
		;;
	keys) check_keys;
		grep Key ${CONFIG}
		;;
	status) check_keys; status
		;;
	restart) soft_restart
		;;
	*) echo "$0 start|stop|status|restart"
		;;
esac
